{"version":3,"sources":["utils/taskExtraction.js","stories/AddTaskCondensed.js","stories/containers/AddTask.js","stories/MenuList.js","features/menu/menuSlice.js","features/tasks/selectors.js","stories/containers/MenuListContainer.js","stories/DateText.js","stories/Task.js","stories/TaskList.js","features/tasks/tasksSlice.js","stories/containers/TaskList.js","App.js","sagas/index.js","serviceWorker.js","index.js"],"names":["CATEGORIES_REGEXP","RegExp","TAGS_REGEXP","DATE_REGEXP","replaceCategory","R","replaceTags","replaceDate","replaceCategoriesTagsDates","regexpCat","regexpTag","regexpDate","text","extractHelper","regexp","toRemove","extractCategory","extractTags","extractDate","parseDom","DOMParser","parseFromString","body","textContent","AddTaskCondensed","onAddTask","useState","task","setTask","onKeyPress","useCallback","event","which","preventDefault","extractedTask","title","category","tags","completeBy","moment","valueOf","undefined","useEffect","document","addEventListener","removeEventListener","className","html","onChange","value","target","console","log","placeholder","connect","dispatch","addTask","type","ANCHOR_CLASS","MenuList","menuItems","selected","onAddNewItem","onSelect","AddNewItem","showInput","setShowInput","InputEl","autoFocus","e","keyCode","onClick","Menu","count","isSelected","countClass","CountEl","anchorClass","map","menuItem","key","createSlice","require","initialItems","ALL_MENU_ITEM","OVERDUE_MENU_ITEM","UNCATEGORIZED_MENU_ITEM","menuSlice","name","initialState","items","reducers","add","state","action","find","item","payload","push","remove","filter","menu","select","actions","getTasks","tasks","filterVisibleTasks","isAfter","getMenuWithTaskTotals","createSelector","menus","length","getVisibleTasks","selectedMenuItem","props","DateText","date","fromNow","format","TASK_TITLE","TASK_COMPLETED_TITLE","DATE","DATE_OVERTIME","Task","id","completed","onToggleTask","filterCategory","overtime","categoryElement","dateElement","defaultChecked","disabled","readOnly","tag","taskCompleted","completedTasks","uncompletedTasks","sortByCompleteBy","taskClassName","index","TaskList","empty","events","uncompleted","RenderTasks","taskId","taskSlice","reducer","prepare","toggleTask","App","EmptyTasks","addTaskExtended","watchRequestTask","rootSaga","put","takeEvery","fork","Boolean","window","location","hostname","match","sagaMiddleware","createSagaMiddleware","store","configureStore","combineReducers","taskReducer","menuReducer","middleware","getDefaultMiddleware","run","subtract","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6b40dde4.chunk.js","sourcesContent":["import * as R from 'ramda';\n\nconst CATEGORIES_REGEXP = new RegExp(/#(\\S+)/, 'g');\nconst TAGS_REGEXP = new RegExp(/~(\\S+)/, 'g');\nconst DATE_REGEXP = new RegExp(/@(\\d{1,2}[-/]\\d{1,2}[-/]?(\\d{2})*)/, 'g');\n\nexport const replaceCategory = R.replace(CATEGORIES_REGEXP);\nexport const replaceTags = R.replace(TAGS_REGEXP);\nexport const replaceDate = R.replace(DATE_REGEXP);\nexport const replaceCategoriesTagsDates = R.curry(\n  (regexpCat, regexpTag, regexpDate, text) =>\n    R.pipe(\n      replaceCategory(regexpCat),\n      replaceTags(regexpTag),\n      replaceDate(regexpDate),\n      R.trim,\n    )(text),\n);\n\nconst extractHelper = (regexp, toRemove) =>\n  R.pipe(R.match(regexp), R.map(R.replace(toRemove, '')));\n\nconst extractCategory = R.pipe(extractHelper(CATEGORIES_REGEXP, '#'), R.head);\nconst extractTags = extractHelper(TAGS_REGEXP, '~');\nconst extractDate = R.pipe(extractHelper(DATE_REGEXP, '@'), R.head);\n\nexport const extractTaskInfo = (text) => {\n  const title = replaceCategoriesTagsDates('', '', '', text);\n  const category = extractCategory(text);\n  const tags = extractTags(text);\n  const completeBy = extractDate(text);\n\n  return {\n    title,\n    category,\n    tags,\n    completeBy,\n  };\n};\n\nexport const parseDom = (text) =>\n  new DOMParser().parseFromString(text, 'text/html').body.textContent;\n","import moment from 'moment';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport ContentEditable from 'react-contenteditable';\nimport {\n  extractTaskInfo,\n  parseDom,\n  replaceCategoriesTagsDates,\n} from '../utils/taskExtraction';\nimport './AddTaskCondensed.css';\n\nconst INPUT =\n  'outline-none border border-gray-500 focus:border-gray-600 rounded py-2 px-3 mb-2';\nconst REPLACE_CATEGORIES_REGEXP = '<span style=\"color: blue\">#$1</span>';\nconst REPLACE_TAGS_REGEXP = '<span style=\"color: gray\">~$1</span>';\nconst REPLACE_DATE_REGEXP = '<span style=\"color: green\">@$1</span>';\n\nexport default function AddTaskCondensed({ onAddTask }) {\n  const [task, setTask] = useState('');\n\n  const onKeyPress = useCallback(\n    (event) => {\n      if (event.which === 13) {\n        event.preventDefault();\n\n        if (!task) {\n          return;\n        }\n\n        const extractedTask = extractTaskInfo(parseDom(task));\n        const { completeBy } = extractedTask;\n        onAddTask({\n          ...extractedTask,\n          completeBy: completeBy\n            ? moment(completeBy, 'DD-MM-YYYY').valueOf()\n            : undefined,\n        });\n\n        setTask('');\n      }\n    },\n    [task, onAddTask],\n  );\n\n  useEffect(() => {\n    document.addEventListener('keydown', onKeyPress);\n\n    return () => {\n      document.removeEventListener('keydown', onKeyPress);\n    };\n  });\n\n  const onHandleChange = ({ target: { value } }) => {\n    console.log(\n      replaceCategoriesTagsDates(\n        REPLACE_CATEGORIES_REGEXP,\n        REPLACE_TAGS_REGEXP,\n        REPLACE_DATE_REGEXP,\n        parseDom(value),\n      ),\n    );\n    setTask(\n      replaceCategoriesTagsDates(\n        REPLACE_CATEGORIES_REGEXP,\n        REPLACE_TAGS_REGEXP,\n        REPLACE_DATE_REGEXP,\n        parseDom(value),\n      ),\n    );\n  };\n\n  return (\n    <div className=\"relative\">\n      <ContentEditable\n        html={task}\n        onChange={onHandleChange}\n        onKeyPress={onKeyPress}\n        placeholder=\"Enter a new task (#category, ~tags, @date)\"\n        className={`${INPUT} m-5`}\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport AddTaskCondensed from '../AddTaskCondensed';\n\nconst AddTask = ({ addTask }) => {\n  return <AddTaskCondensed onAddTask={addTask} />;\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addTask: (task) => {\n      // dispatch(addTask(task));\n      // if (task.category) {\n      //   dispatch(add(task.category));\n      // }\n      dispatch({\n        type: 'ADD_TASK_EXTENDED',\n        task,\n      });\n    },\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(AddTask);\n","import React, { useState, useCallback, useEffect } from 'react';\nimport { BsPlusCircleFill } from 'react-icons/bs';\n\nconst LIST_ITEM_CLASS = 'box-content flex m-0 border-gray-700 border-b';\nconst ANCHOR_CLASS =\n  'focus:outline-none cursor-pointer text-left flex items-center box-content w-full text-white ' +\n  'px-3 h-10 bg-gray-600 hover:bg-blue-700';\nconst COUNT_CLASS =\n  'bg-blue-600 px-2 text-xs rounded-md text-gray-300 font-semibold border-blue-700 border';\n\nexport default function MenuList({\n  menuItems,\n  selected,\n  onAddNewItem,\n  onSelect,\n}) {\n  const AddNewItem = () => {\n    const [showInput, setShowInput] = useState(false);\n\n    const showInputCb = (e) => {\n      e.preventDefault();\n      setShowInput(true);\n    };\n\n    const InputEl = () => {\n      const onKeyPress = useCallback((event) => {\n        if (event.which === 13) {\n          setShowInput(false);\n        } else if (event.which === 27) {\n          setShowInput(false);\n        }\n      }, []);\n\n      useEffect(() => {\n        document.addEventListener('keydown', onKeyPress, false);\n\n        return () => {\n          document.removeEventListener('keydown', onKeyPress, false);\n        };\n      });\n\n      const saveNewMenuItem = (e) => {\n        if (e.keyCode === 13) {\n          e.preventDefault();\n        }\n      };\n      return (\n        <input\n          className=\"flex flex-1 bg-transparent outline-none\"\n          type=\"text\"\n          autoFocus\n          placeholder=\"start typing, press enter to add\"\n          onKeyPress={saveNewMenuItem}\n        />\n      );\n    };\n\n    return (\n      <li className={LIST_ITEM_CLASS}>\n        <button className={ANCHOR_CLASS} onClick={showInputCb}>\n          {showInput ? <InputEl /> : <BsPlusCircleFill />}\n        </button>\n      </li>\n    );\n  };\n\n  const Menu = ({ title, count, isSelected }) => {\n    const countClass = COUNT_CLASS + (isSelected ? ' border-blue-800' : '');\n    const CountEl =\n      count === undefined ? '' : <span className={countClass}>{count}</span>;\n    const anchorClass = ANCHOR_CLASS + (isSelected ? ' bg-blue-800' : '');\n\n    return (\n      <li className={LIST_ITEM_CLASS}>\n        <button className={anchorClass} onClick={() => onSelect(title)}>\n          <span className=\"flex-1\">{title}</span>\n          {CountEl}\n        </button>\n      </li>\n    );\n  };\n\n  return (\n    <ul className=\"flex flex-col p-0 text-white\">\n      {menuItems.map((menuItem) => (\n        <Menu\n          key={menuItem.title}\n          isSelected={menuItem.title === selected}\n          {...menuItem}\n        />\n      ))}\n      {onAddNewItem ? <AddNewItem /> : ''}\n    </ul>\n  );\n}\n","const { createSlice } = require('@reduxjs/toolkit');\n\nexport const initialItems = ['All', 'Overdue', 'Uncategorized'];\nexport const [\n  ALL_MENU_ITEM,\n  OVERDUE_MENU_ITEM,\n  UNCATEGORIZED_MENU_ITEM,\n] = initialItems;\n\nconst menuSlice = createSlice({\n  name: 'menu',\n  initialState: {\n    items: initialItems,\n    selected: ALL_MENU_ITEM,\n  },\n  reducers: {\n    add: (state, action) => {\n      if (!state.items.find((item) => item === action.payload)) {\n        state.items.push(action.payload);\n      }\n    },\n    remove: (state, action) => {\n      state.items.filter((menu) => menu !== action.payload);\n    },\n    select: (state, action) => {\n      state.selected = action.payload;\n    },\n  },\n});\n\nexport const { add, remove, select } = menuSlice.actions;\n\nexport default menuSlice.reducer;\n","import { createSelector } from 'reselect';\nimport moment from 'moment';\nimport {\n  ALL_MENU_ITEM,\n  OVERDUE_MENU_ITEM,\n  UNCATEGORIZED_MENU_ITEM,\n} from '../menu/menuSlice';\n\nconst getMenus = (state) => state.menu.items;\nconst getSelectedMenuItem = (state) => state.menu.selected;\nconst getTasks = (state) => state.tasks;\n\nconst filterVisibleTasks = (menuItem, tasks) => {\n  switch (menuItem) {\n    case ALL_MENU_ITEM:\n      return tasks;\n    case OVERDUE_MENU_ITEM:\n      return tasks.filter(({ completeBy }) => moment().isAfter(completeBy));\n    case UNCATEGORIZED_MENU_ITEM:\n      return tasks.filter(({ category }) => !category);\n    default:\n      return tasks.filter(({ category }) => category === menuItem);\n  }\n};\n\nexport const getMenuWithTaskTotals = createSelector(\n  [getMenus, getTasks],\n  (menus, tasks) => {\n    return menus.map((menu) => ({\n      title: menu,\n      count: filterVisibleTasks(menu, tasks).length,\n    }));\n  },\n);\n\nexport const getVisibleTasks = createSelector(\n  [getSelectedMenuItem, getTasks],\n  (selectedMenuItem, tasks) => {\n    return filterVisibleTasks(selectedMenuItem, tasks);\n  },\n);\n","import React from 'react';\nimport MenuList from '../MenuList';\nimport { connect } from 'react-redux';\nimport { select } from '../../features/menu/menuSlice';\nimport { getMenuWithTaskTotals } from '../../features/tasks/selectors';\n\nconst MenuListContainer = (props) => {\n  return <MenuList {...props} />;\n};\n\nconst mapStateToProps = (state) => ({\n  menuItems: getMenuWithTaskTotals(state),\n  selected: state.menu.selected,\n});\n\nexport default connect(mapStateToProps, {\n  onSelect: select,\n})(MenuListContainer);\n","import React from \"react\";\n\nimport moment from 'moment';\nmoment().format();\n\nexport default function DateText({ date }) {\n  return (\n    <span>\n      {moment(date).fromNow()}\n    </span>\n  );\n}","import moment from 'moment';\nimport React from 'react';\nimport { BsDot } from 'react-icons/bs';\nimport { FiCheckSquare, FiSquare } from 'react-icons/fi';\nimport DateText from './DateText';\nimport './Task.css';\n\nconst TASK_TITLE_BASE = 'outline-none flex-1 bg-transparent w-full p-0';\nconst TASK_TITLE = `${TASK_TITLE_BASE} text-gray-900`;\nconst TASK_COMPLETED_TITLE = `${TASK_TITLE_BASE} line-through text-gray-500`;\nconst DATE_BASE = 'text-xs';\nconst DATE = `${DATE_BASE} text-gray-600 font-hairline`;\nconst DATE_OVERTIME = `${DATE_BASE} text-red-700 font-semibold`;\n\nexport default function Task({\n  task: { id, title, completed, category, tags = [], completeBy },\n  onToggleTask,\n  filterCategory,\n  className,\n}) {\n  const overtime = moment().isAfter(completeBy);\n\n  const categoryElement = category ? (\n    <>\n      <button onClick={() => filterCategory(category)}>#{category}</button>\n      {tags?.length ? <BsDot className=\"text-gray-500\" /> : ''}\n    </>\n  ) : (\n    ''\n  );\n  const dateElement = !completeBy ? (\n    ''\n  ) : (\n    <span className={overtime && !completed ? DATE_OVERTIME : DATE}>\n      <DateText date={completeBy} />\n    </span>\n  );\n\n  return (\n    <div className={`bg-gray-100 p-2 flex items-center ${className}`}>\n      <div className=\"\">\n        <input\n          className=\"task__check hidden\"\n          type=\"checkbox\"\n          defaultChecked={completed}\n          disabled={true}\n        />\n        <span\n          className=\"p-2 flex justify-center text-blue-500 text-xl\"\n          onClick={() => onToggleTask(id)}\n        >\n          {completed ? <FiCheckSquare /> : <FiSquare />}\n        </span>\n      </div>\n      <div className=\"flex-1 pr-4\">\n        <input\n          className={completed ? TASK_COMPLETED_TITLE : TASK_TITLE}\n          type=\"text\"\n          value={title}\n          readOnly={true}\n        />\n        <div className=\"flex items-center text-sm text-gray-600\">\n          {categoryElement}\n          {tags.map((tag) => (\n            <span key={tag} className=\"mr-1 italic\">\n              ~{tag}\n            </span>\n          ))}\n        </div>\n      </div>\n      {dateElement}\n    </div>\n  );\n}\n","import React from 'react';\nimport * as R from 'ramda';\nimport Task from './Task';\n\nconst taskCompleted = R.where({ completed: R.equals(true) });\nconst completedTasks = R.filter(taskCompleted);\nconst uncompletedTasks = R.reject(taskCompleted);\nconst sortByCompleteBy = R.sortBy(R.prop('completeBy'));\n\nconst taskClassName = (index, length) =>\n  index < length - 1 ? 'border-b border-gray-300' : '';\n\nexport default function TaskList({\n  tasks = [],\n  empty,\n  onToggleTask,\n  filterCategory,\n}) {\n  const events = {\n    onToggleTask,\n    filterCategory,\n  };\n\n  const completed = completedTasks(tasks);\n  const uncompleted = sortByCompleteBy(uncompletedTasks(tasks));\n\n  if (!tasks.length) {\n    return <div>{empty}</div>;\n  }\n\n  const RenderTasks = ({ tasks }) => (\n    <>\n      {tasks.map((task, index) => (\n        <Task\n          key={task.id}\n          className={taskClassName(index, tasks.length)}\n          task={task}\n          {...events}\n        />\n      ))}\n    </>\n  );\n\n  return (\n    <>\n      <RenderTasks tasks={uncompleted} />\n      {completed.length ? (\n        <h4 className=\"px-4 py-1 bg-gray-400 text-white uppercase text-xs font-bold\">\n          completed\n        </h4>\n      ) : (\n        ''\n      )}\n      <RenderTasks tasks={completed} />\n    </>\n  );\n}\n","import { createSlice } from '@reduxjs/toolkit';\n\nlet taskId = 1;\n\nconst taskSlice = createSlice({\n  name: 'tasks',\n  initialState: [],\n  reducers: {\n    addTask: {\n      reducer(state, action) {\n        state.push(action.payload);\n\n        // debugger;\n        // if (action.payload?.category) {\n        //   store.dispatch(add(action.payload.category));\n        // }\n      },\n      prepare(payload) {\n        return {\n          payload: {\n            ...payload,\n            id: taskId++,\n            completeBy: payload.completeBy?.valueOf(),\n            completed: false,\n          },\n        };\n      },\n    },\n    toggleTask: (state, { payload: id }) => {\n      const task = state.find((task) => task.id === id);\n      if (task) {\n        task.completed = !task.completed;\n      }\n    },\n  },\n});\n\nexport const { addTask, toggleTask } = taskSlice.actions;\n\nexport default taskSlice.reducer;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport TaskList from '../TaskList';\nimport { toggleTask } from '../../features/tasks/tasksSlice';\nimport { getVisibleTasks } from '../../features/tasks/selectors';\nimport { select } from '../../features/menu/menuSlice';\n\nconst TaskListContainer = (props) => {\n  return <TaskList {...props} />;\n};\n\nconst mapStateToProps = (state) => ({\n  tasks: getVisibleTasks(state),\n});\n\nexport default connect(mapStateToProps, {\n  onToggleTask: toggleTask,\n  filterCategory: select,\n})(TaskListContainer);\n","import React from 'react';\nimport './App.css';\nimport AddTask from './stories/containers/AddTask';\nimport MenuListContainer from './stories/containers/MenuListContainer';\nimport TaskListContainer from './stories/containers/TaskList';\nimport './tailwind.output.css';\n\nfunction App() {\n  const EmptyTasks = () => (\n    <span className=\"flex m-5 text-blue-600 text-2xl italic font-light\">\n      No tasks found.\n    </span>\n  );\n\n  return (\n    <div className=\"flex flex-row h-screen\">\n      <div className=\"w-48 bg-gray-600\">\n        <MenuListContainer />\n      </div>\n      <div className=\"flex-1\">\n        <TaskListContainer empty={<EmptyTasks />} />\n        <AddTask />\n        <div className=\"m-5\">\n          {/* <h3 className=\"font-thin text-gray-500 text-lg mb-2\">\n            Add a new task:\n          </h3> */}\n          {/* <TaskForm onSubmitTask={addTask} /> */}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { fork, put, takeEvery } from 'redux-saga/effects';\nimport { add } from '../features/menu/menuSlice';\nimport { addTask } from '../features/tasks/tasksSlice';\n\nfunction* addTaskExtended({ task }) {\n  yield put(addTask(task));\n\n  if (task.category) {\n    yield put(add(task.category));\n  }\n}\n\nfunction* watchRequestTask() {\n  yield takeEvery('ADD_TASK_EXTENDED', addTaskExtended);\n}\n\nexport default function* rootSaga() {\n  yield fork(watchRequestTask);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  configureStore,\n  combineReducers,\n  getDefaultMiddleware,\n} from '@reduxjs/toolkit';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport App from './App';\nimport taskReducer, { addTask } from './features/tasks/tasksSlice';\nimport menuReducer, { add } from './features/menu/menuSlice';\nimport moment from 'moment';\nimport rootSaga from './sagas';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport const store = configureStore({\n  reducer: combineReducers({\n    tasks: taskReducer,\n    menu: menuReducer,\n  }),\n  middleware: [...getDefaultMiddleware(), sagaMiddleware],\n});\n\nsagaMiddleware.run(rootSaga);\n\nstore.dispatch(add('tutorial'));\nstore.dispatch(\n  addTask({\n    title: 'You should have done this yesterday!',\n    completeBy: moment().subtract(1, 'd'),\n    category: 'tutorial',\n  }),\n);\n\nstore.dispatch(\n  addTask({\n    title: 'Get started by adding your own todos',\n    completeBy: moment().add(30, 'm'),\n    category: 'tutorial',\n  }),\n);\nstore.dispatch(\n  addTask({\n    title: 'Then tick them off.',\n    completeBy: moment().add(1, 'd'),\n    category: 'tutorial',\n  }),\n);\nstore.dispatch(\n  addTask({\n    title: 'And feel accomplished.',\n    completeBy: moment().add(7, 'd'),\n    category: 'tutorial',\n  }),\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}